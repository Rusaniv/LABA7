(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 26.12.2020 21:02:17         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

unit code2;

{$DEFINE BusinessClasses_unitheader}
{$INCLUDE BusinessClasses_Interface.inc}

{ Includefile for methodimplementations }


const
  BoldMemberAssertInvalidObjectType: string = 'Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)';

{ TBusinessClassesRoot }

procedure TBusinessClassesRootList.Add(NewObject: TBusinessClassesRoot);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TBusinessClassesRootList.IndexOf(anObject: TBusinessClassesRoot): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TBusinessClassesRootList.Includes(anObject: TBusinessClassesRoot) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TBusinessClassesRootList.AddNew: TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(InternalAddNew);
end;

procedure TBusinessClassesRootList.Insert(index: Integer; NewObject: TBusinessClassesRoot);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TBusinessClassesRootList.GetBoldObject(index: Integer): TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(GetElement(index));
end;

procedure TBusinessClassesRootList.SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
begin;
  SetElement(index, NewObject);
end;

{ TMesto }

function TMesto._Get_M_NomerMesta: TBAInteger;
begin
  assert(ValidateMember('TMesto', 'NomerMesta', 0, TBAInteger));
  Result := TBAInteger(BoldMembers[0]);
end;

function TMesto._GetNomerMesta: Integer;
begin
  Result := M_NomerMesta.AsInteger;
end;

procedure TMesto._SetNomerMesta(const NewValue: Integer);
begin
  M_NomerMesta.AsInteger := NewValue;
end;

function TMesto._Get_M_idMesto: TBAInteger;
begin
  assert(ValidateMember('TMesto', 'idMesto', 1, TBAInteger));
  Result := TBAInteger(BoldMembers[1]);
end;

function TMesto._GetidMesto: Integer;
begin
  Result := M_idMesto.AsInteger;
end;

procedure TMesto._SetidMesto(const NewValue: Integer);
begin
  M_idMesto.AsInteger := NewValue;
end;

function TMesto._Get_M_Kupleno: TBAInteger;
begin
  assert(ValidateMember('TMesto', 'Kupleno', 2, TBAInteger));
  Result := TBAInteger(BoldMembers[2]);
end;

function TMesto._GetKupleno: Integer;
begin
  Result := M_Kupleno.AsInteger;
end;

procedure TMesto._SetKupleno(const NewValue: Integer);
begin
  M_Kupleno.AsInteger := NewValue;
end;

function TMesto._Get_M_ZritelZal: TBoldObjectReference;
begin
  assert(ValidateMember('TMesto', 'ZritelZal', 3, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[3]);
end;

function TMesto._GetZritelZal: TZritelZal;
begin
  assert(not assigned(M_ZritelZal.BoldObject) or (M_ZritelZal.BoldObject is TZritelZal), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'ZritelZal', M_ZritelZal.BoldObject.ClassName, 'TZritelZal']));
  Result := TZritelZal(M_ZritelZal.BoldObject);
end;

procedure TMesto._SetZritelZal(const value: TZritelZal);
begin
  M_ZritelZal.BoldObject := value;
end;

procedure TMestoList.Add(NewObject: TMesto);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TMestoList.IndexOf(anObject: TMesto): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TMestoList.Includes(anObject: TMesto) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TMestoList.AddNew: TMesto;
begin
  result := TMesto(InternalAddNew);
end;

procedure TMestoList.Insert(index: Integer; NewObject: TMesto);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TMestoList.GetBoldObject(index: Integer): TMesto;
begin
  result := TMesto(GetElement(index));
end;

procedure TMestoList.SetBoldObject(index: Integer; NewObject: TMesto);
begin;
  SetElement(index, NewObject);
end;

{ TRaspisanie }

function TRaspisanie._Get_M_idRaspisanue: TBAInteger;
begin
  assert(ValidateMember('TRaspisanie', 'idRaspisanue', 0, TBAInteger));
  Result := TBAInteger(BoldMembers[0]);
end;

function TRaspisanie._GetidRaspisanue: Integer;
begin
  Result := M_idRaspisanue.AsInteger;
end;

procedure TRaspisanie._SetidRaspisanue(const NewValue: Integer);
begin
  M_idRaspisanue.AsInteger := NewValue;
end;

function TRaspisanie._Get_M_NazvanieSeansa: TBAString;
begin
  assert(ValidateMember('TRaspisanie', 'NazvanieSeansa', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TRaspisanie._GetNazvanieSeansa: String;
begin
  Result := M_NazvanieSeansa.AsString;
end;

procedure TRaspisanie._SetNazvanieSeansa(const NewValue: String);
begin
  M_NazvanieSeansa.AsString := NewValue;
end;

function TRaspisanie._Get_M_idZritelZal: TBAInteger;
begin
  assert(ValidateMember('TRaspisanie', 'idZritelZal', 2, TBAInteger));
  Result := TBAInteger(BoldMembers[2]);
end;

function TRaspisanie._GetidZritelZal: Integer;
begin
  Result := M_idZritelZal.AsInteger;
end;

procedure TRaspisanie._SetidZritelZal(const NewValue: Integer);
begin
  M_idZritelZal.AsInteger := NewValue;
end;

function TRaspisanie._Get_M_Cena: TBAInteger;
begin
  assert(ValidateMember('TRaspisanie', 'Cena', 3, TBAInteger));
  Result := TBAInteger(BoldMembers[3]);
end;

function TRaspisanie._GetCena: Integer;
begin
  Result := M_Cena.AsInteger;
end;

procedure TRaspisanie._SetCena(const NewValue: Integer);
begin
  M_Cena.AsInteger := NewValue;
end;

function TRaspisanie._Get_M_Dlitelnoct: TBAString;
begin
  assert(ValidateMember('TRaspisanie', 'Dlitelnoct', 4, TBAString));
  Result := TBAString(BoldMembers[4]);
end;

function TRaspisanie._GetDlitelnoct: String;
begin
  Result := M_Dlitelnoct.AsString;
end;

procedure TRaspisanie._SetDlitelnoct(const NewValue: String);
begin
  M_Dlitelnoct.AsString := NewValue;
end;

function TRaspisanie._Get_M_Opisanie: TBAString;
begin
  assert(ValidateMember('TRaspisanie', 'Opisanie', 5, TBAString));
  Result := TBAString(BoldMembers[5]);
end;

function TRaspisanie._GetOpisanie: String;
begin
  Result := M_Opisanie.AsString;
end;

procedure TRaspisanie._SetOpisanie(const NewValue: String);
begin
  M_Opisanie.AsString := NewValue;
end;

function TRaspisanie._GetZritelZal: TZritelZalList;
begin
  assert(ValidateMember('TRaspisanie', 'ZritelZal', 6, TZritelZalList));
  Result := TZritelZalList(BoldMembers[6]);
end;

procedure TRaspisanieList.Add(NewObject: TRaspisanie);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TRaspisanieList.IndexOf(anObject: TRaspisanie): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TRaspisanieList.Includes(anObject: TRaspisanie) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TRaspisanieList.AddNew: TRaspisanie;
begin
  result := TRaspisanie(InternalAddNew);
end;

procedure TRaspisanieList.Insert(index: Integer; NewObject: TRaspisanie);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TRaspisanieList.GetBoldObject(index: Integer): TRaspisanie;
begin
  result := TRaspisanie(GetElement(index));
end;

procedure TRaspisanieList.SetBoldObject(index: Integer; NewObject: TRaspisanie);
begin;
  SetElement(index, NewObject);
end;

{ TZritelZal }

function TZritelZal._Get_M_idZritelZal: TBAInteger;
begin
  assert(ValidateMember('TZritelZal', 'idZritelZal', 0, TBAInteger));
  Result := TBAInteger(BoldMembers[0]);
end;

function TZritelZal._GetidZritelZal: Integer;
begin
  Result := M_idZritelZal.AsInteger;
end;

procedure TZritelZal._SetidZritelZal(const NewValue: Integer);
begin
  M_idZritelZal.AsInteger := NewValue;
end;

function TZritelZal._Get_M_nazvaniezala: TBAString;
begin
  assert(ValidateMember('TZritelZal', 'nazvaniezala', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TZritelZal._Getnazvaniezala: String;
begin
  Result := M_nazvaniezala.AsString;
end;

procedure TZritelZal._Setnazvaniezala(const NewValue: String);
begin
  M_nazvaniezala.AsString := NewValue;
end;

function TZritelZal._Get_M_idMesto: TBAInteger;
begin
  assert(ValidateMember('TZritelZal', 'idMesto', 2, TBAInteger));
  Result := TBAInteger(BoldMembers[2]);
end;

function TZritelZal._GetidMesto: Integer;
begin
  Result := M_idMesto.AsInteger;
end;

procedure TZritelZal._SetidMesto(const NewValue: Integer);
begin
  M_idMesto.AsInteger := NewValue;
end;

function TZritelZal._GetMesto: TMestoList;
begin
  assert(ValidateMember('TZritelZal', 'Mesto', 5, TMestoList));
  Result := TMestoList(BoldMembers[5]);
end;

procedure TZritelZalList.Add(NewObject: TZritelZal);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TZritelZalList.IndexOf(anObject: TZritelZal): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TZritelZalList.Includes(anObject: TZritelZal) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TZritelZalList.AddNew: TZritelZal;
begin
  result := TZritelZal(InternalAddNew);
end;

procedure TZritelZalList.Insert(index: Integer; NewObject: TZritelZal);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TZritelZalList.GetBoldObject(index: Integer): TZritelZal;
begin
  result := TZritelZal(GetElement(index));
end;

procedure TZritelZalList.SetBoldObject(index: Integer; NewObject: TZritelZal);
begin;
  SetElement(index, NewObject);
end;

function GeneratedCodeCRC: String;
begin
  result := '1485239007';
end;

procedure InstallObjectListClasses(BoldObjectListClasses: TBoldGeneratedClassList);
begin
  BoldObjectListClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRootList);
  BoldObjectListClasses.AddObjectEntry('Mesto', TMestoList);
  BoldObjectListClasses.AddObjectEntry('Raspisanie', TRaspisanieList);
  BoldObjectListClasses.AddObjectEntry('ZritelZal', TZritelZalList);
end;

procedure InstallBusinessClasses(BoldObjectClasses: TBoldGeneratedClassList);
begin
  BoldObjectClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRoot);
  BoldObjectClasses.AddObjectEntry('Mesto', TMesto);
  BoldObjectClasses.AddObjectEntry('Raspisanie', TRaspisanie);
  BoldObjectClasses.AddObjectEntry('ZritelZal', TZritelZal);
end;

var
  CodeDescriptor: TBoldGeneratedCodeDescriptor;

initialization
  CodeDescriptor := GeneratedCodes.AddGeneratedCodeDescriptorWithFunc('BusinessClasses', InstallBusinessClasses, InstallObjectListClasses, GeneratedCodeCRC);
finalization
  GeneratedCodes.Remove(CodeDescriptor);
end.
